<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Telegram Bot API</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="og:title" content="Telegram Bot API">
    <meta property="og:image" content="">
    <meta property="og:description" content="The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram. To learn how to create and set up a bot, please consult our Introduction to Bots »  Authorization Making requests Getting updates Available types Available methods Authorizing your bot Each bot is given a unique authentication token when it is created. The token looks something like 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11, but we&#39;ll use simply &lt;token&gt; in this document instead. You can learn about obtaining tokens and generating new ones in this document. Making requests All queries to the Telegram Bot API must be served over HTTPS and need to be presented in this form: https://api.telegram.org/bot&lt;token&gt;/METHOD_NAME. Like this for example: https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/getMe We support GET and POST HTTP methods. Use either URL query string or application/x-www-form-urlencoded or multipart/form-data for passing parameters in Bot API requests. The response ..">
    <link rel="shortcut icon" href="/favicon.ico?3" type="image/x-icon" />

    <link href="/css/bootstrap.min.css?2" rel="stylesheet">
    
    <link href="/css/telegram.css?84" rel="stylesheet" media="screen">
    <style>
    </style>
  </head>
  <body>
    <div class="dev_page_wrap">
      <div class="dev_page_head navbar navbar-static-top navbar-tg">
        <div class="navbar-inner">
          <div class="container clearfix">
            <ul class="nav navbar-nav navbar-right hidden-xs"><li class="navbar-twitter"><a href="https://twitter.com/telegram" target="_blank" data-track="Follow/Twitter" onclick="trackDlClick(this, event)"><i class="icon icon-twitter"></i><span> Twitter</span></a></li></ul>
            <ul class="nav navbar-nav">
              <li><a href="//telegram.org/">Home</a></li>
<li class="hidden-xs"><a href="//telegram.org/faq">FAQ</a></li>
<li class="hidden-xs"><a href="//telegram.org/apps">Apps</a></li>
<li class=""><a href="/api">API</a></li>
<li class=""><a href="/mtproto">Protocol</a></li>
<li class=""><a href="/schema">Schema</a></li>
            </ul>
          </div>
        </div>
      </div>
      <div class="container clearfix">
        <div class="dev_page">
          <div id="dev_page_content_wrap" class=" ">
  <div class="dev_page_bread_crumbs"></div>
  <h1 id="dev_page_title">Telegram Bot API</h1>
  
  <div id="dev_page_content"><blockquote>
<p>The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.<br>To learn how to create and set up a bot, please consult our <a href="https://core.telegram.org/bots"><strong>Introduction to Bots »</strong></a></p>
</blockquote>
<p><a href="#authorizing-your-bot">Authorization</a><br><a href="#making-requests">Making requests</a><br><a href="#getting-updates">Getting updates</a><br><a href="#available-types">Available types</a><br><a href="#available-methods">Available methods</a></p>
<h3><a class="anchor" name="authorizing-your-bot" href="#authorizing-your-bot"><i class="anchor-icon"></i></a>Authorizing your bot</h3>
<p>Each bot is given a unique authentication token <a href="/bots#botfather">when it is created</a>. The token looks something like <code>123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11</code>, but we&#39;ll use simply <strong>&lt;token&gt;</strong> in this document instead. You can learn about obtaining tokens and generating new ones in <a href="https://core.telegram.org/bots#botfather">this document</a>.</p>
<h3><a class="anchor" name="making-requests" href="#making-requests"><i class="anchor-icon"></i></a>Making requests</h3>
<p>All queries to the Telegram Bot API must be served over HTTPS and need to be presented in this form: <code>https://api.telegram.org/bot&lt;token&gt;/METHOD_NAME</code>. Like this for example:</p>
<pre><code>https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/getMe</code></pre>
<p>We support <strong>GET</strong> and <strong>POST</strong> HTTP methods. Use either <a href="https://en.wikipedia.org/wiki/Query_string">URL query string</a> or <em>application/x-www-form-urlencoded</em> or <em>multipart/form-data</em> for passing parameters in Bot API requests.</p>
<p>The response contains a JSON object, which always has a Boolean field ‘ok’ and may have an optional String field ‘description’ with a human-readable description of the result. If ‘ok’ equals true, the request was successful and the result of the query can be found in the ‘result’ field. In case of an unsuccessful request, ‘ok’ equals false and the error is explained in the ‘description’. An Integer ‘error_code’ field is also returned, but its contents are subject to change in the future.</p>
<ul>
<li>All methods in the Bot API are case-insensitive.</li>
<li>All queries must be made using UTF-8.</li>
</ul>
<h3><a class="anchor" name="getting-updates" href="#getting-updates"><i class="anchor-icon"></i></a>Getting updates</h3>
<p>There are two mutually exclusive ways of receiving updates for your bot — the <a href="#getupdates">getUpdates</a> method on one hand and <a href="#setwebhook">Webhooks</a> on the other. Incoming updates are stored on the server until the bot receives them either way, but they will not be kept longer than 24 hours.</p>
<p>Regardless of which option you choose, you will receive JSON-serialized <a href="#update">Update</a> objects as a result.</p>
<h4><a class="anchor" name="update" href="#update"><i class="anchor-icon"></i></a>Update</h4>
<p>This <a href="#available-types">object</a> represents an incoming update. </p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>update_id</td>
<td>Integer</td>
<td>The update‘s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you’re using <a href="#setwebhook">Webhooks</a>, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order.</td>
</tr>
<tr>
<td>message</td>
<td><a href="#message">Message</a></td>
<td><em>Optional</em>. New incoming message of any kind — text, photo, sticker, etc.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="getupdates" href="#getupdates"><i class="anchor-icon"></i></a>getUpdates</h4>
<p>Use this method to receive incoming updates using long polling (<a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>). An Array of <a href="#update">Update</a> objects is returned.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>offset</td>
<td>Integer</td>
<td>Optional</td>
<td>Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as <a href="#getupdates">getUpdates</a> is called with an <em>offset</em> higher than its <em>update_id</em>.</td>
</tr>
<tr>
<td>limit</td>
<td>Integer</td>
<td>Optional</td>
<td>Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100</td>
</tr>
<tr>
<td>timeout</td>
<td>Integer</td>
<td>Optional</td>
<td>Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Notes</strong><br><strong>1.</strong> This method will not work if an outgoing webhook is set up.<br><strong>2.</strong> In order to avoid getting duplicate updates, recalculate <em>offset</em> after each server response.</p>
</blockquote>
<h4><a class="anchor" name="setwebhook" href="#setwebhook"><i class="anchor-icon"></i></a>setWebhook</h4>
<p>Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized <a href="#update">Update</a>. In case of an unsuccessful request, we will give up after a reasonable amount of attempts.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>url</td>
<td>String</td>
<td>Optional</td>
<td>HTTPS url to send updates to. Use an empty string to remove webhook integration</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Notes</strong><br><strong>1.</strong> You will not be able to receive updates using <a href="#getupdates">getUpdates</a> for as long as an outgoing webhook is set up.<br><strong>2.</strong> We currently do not support self-signed certificates.<br><strong>3.</strong> Ports currently supported <em>for Webhooks</em>: <strong>443, 80, 88, 8443</strong>.</p>
</blockquote>
<h3><a class="anchor" name="available-types" href="#available-types"><i class="anchor-icon"></i></a>Available types</h3>
<p>All types used in the Bot API responses are represented as JSON-objects.</p>
<ul>
<li><a href="#user">User</a></li>
<li><a href="#groupchat">GroupChat</a></li>
<li><a href="#message">Message</a></li>
<li><a href="#photosize">PhotoSize</a></li>
<li><a href="#audio">Audio</a></li>
<li><a href="#document">Document</a></li>
<li><a href="#sticker">Sticker</a></li>
<li><a href="#video">Video</a></li>
<li><a href="#contact">Contact</a></li>
<li><a href="#location">Location</a></li>
<li><a href="#update">Update</a></li>
<li><a href="#inputfile">InputFile</a></li>
<li><a href="#userprofilephotos">UserProfilePhotos</a></li>
<li><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a></li>
<li><a href="#replykeyboardhide">ReplyKeyboardHide</a></li>
<li><a href="#forcereply">ForceReply</a></li>
</ul>
<p>It is safe to use 32-bit signed integers for storing all <strong>Integer</strong> fields unless otherwise noted.</p>
<blockquote>
<p><strong>Optional</strong> fields may be not returned when irrelevant.</p>
</blockquote>
<h4><a class="anchor" name="user" href="#user"><i class="anchor-icon"></i></a>User</h4>
<p>This object represents a Telegram user or bot.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>id</td>
<td>Integer</td>
<td>Unique identifier for this user or bot</td>
</tr>
<tr>
<td>first_name</td>
<td>String</td>
<td>User‘s or bot’s first name</td>
</tr>
<tr>
<td>last_name</td>
<td>String</td>
<td><em>Optional</em>. User‘s or bot’s last name</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td><em>Optional</em>. User‘s or bot’s username</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="groupchat" href="#groupchat"><i class="anchor-icon"></i></a>GroupChat</h4>
<p>This object represents a group chat.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>id</td>
<td>Integer</td>
<td>Unique identifier for this group chat</td>
</tr>
<tr>
<td>title</td>
<td>String</td>
<td>Group name</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="message" href="#message"><i class="anchor-icon"></i></a>Message</h4>
<p>This object represents a message.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>message_id</td>
<td>Integer</td>
<td>Unique message identifier</td>
</tr>
<tr>
<td>from</td>
<td><a href="#user">User</a></td>
<td>Sender</td>
</tr>
<tr>
<td>date</td>
<td>Integer</td>
<td>Date the message was sent in Unix time</td>
</tr>
<tr>
<td>chat</td>
<td><a href="#user">User</a> or <a href="#groupchat">GroupChat</a></td>
<td>Conversation the message belongs to — user in case of a private message, GroupChat in case of a group</td>
</tr>
<tr>
<td>forward_from</td>
<td><a href="#user">User</a></td>
<td><em>Optional</em>. For forwarded messages, sender of the original message</td>
</tr>
<tr>
<td>forward_date</td>
<td>Integer</td>
<td><em>Optional</em>. For forwarded messages, date the original message was sent in Unix time</td>
</tr>
<tr>
<td>reply_to_message</td>
<td><a href="#message">Message</a></td>
<td><em>Optional</em>. For replies, the original message. Note that the Message object in this field will not contain further <em>reply_to_message</em> fields even if it itself is a reply.</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td><em>Optional</em>. For text messages, the actual UTF-8 text of the message</td>
</tr>
<tr>
<td>audio</td>
<td><a href="#audio">Audio</a></td>
<td><em>Optional</em>. Message is an audio file, information about the file</td>
</tr>
<tr>
<td>document</td>
<td><a href="#document">Document</a></td>
<td><em>Optional</em>. Message is a general file, information about the file</td>
</tr>
<tr>
<td>photo</td>
<td>Array of <a href="#photosize">PhotoSize</a></td>
<td><em>Optional</em>. Message is a photo, available sizes of the photo</td>
</tr>
<tr>
<td>sticker</td>
<td><a href="#sticker">Sticker</a></td>
<td><em>Optional</em>. Message is a sticker, information about the sticker</td>
</tr>
<tr>
<td>video</td>
<td><a href="#video">Video</a></td>
<td><em>Optional</em>. Message is a video, information about the video</td>
</tr>
<tr>
<td>contact</td>
<td><a href="#contact">Contact</a></td>
<td><em>Optional</em>. Message is a shared contact, information about the contact</td>
</tr>
<tr>
<td>location</td>
<td><a href="#location">Location</a></td>
<td><em>Optional</em>. Message is a shared location, information about the location</td>
</tr>
<tr>
<td>new_chat_participant</td>
<td><a href="#user">User</a></td>
<td><em>Optional</em>. A new member was added to the group, information about them (this member may be bot itself)</td>
</tr>
<tr>
<td>left_chat_participant</td>
<td><a href="#user">User</a></td>
<td><em>Optional</em>. A member was removed from the group, information about them (this member may be bot itself)</td>
</tr>
<tr>
<td>new_chat_title</td>
<td>String</td>
<td><em>Optional</em>. A group title was changed to this value</td>
</tr>
<tr>
<td>new_chat_photo</td>
<td>Array of <a href="#photosize">PhotoSize</a></td>
<td><em>Optional</em>. A group photo was change to this value</td>
</tr>
<tr>
<td>delete_chat_photo</td>
<td>True</td>
<td><em>Optional</em>. Informs that the group photo was deleted</td>
</tr>
<tr>
<td>group_chat_created</td>
<td>True</td>
<td><em>Optional</em>. Informs that the group has been created</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="photosize" href="#photosize"><i class="anchor-icon"></i></a>PhotoSize</h4>
<p>This object represents one size of a photo or a <a href="#document">file</a> / <a href="#sticker">sticker</a> thumbnail.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>file_id</td>
<td>String</td>
<td>Unique identifier for this file</td>
</tr>
<tr>
<td>width</td>
<td>Integer</td>
<td>Photo width</td>
</tr>
<tr>
<td>height</td>
<td>Integer</td>
<td>Photo height</td>
</tr>
<tr>
<td>file_size</td>
<td>Integer</td>
<td><em>Optional</em>. File size</td>
</tr>
</tbody>
</table>
<blockquote>
<p>A missing thumbnail for a file (or sticker) is presented as an empty object. </p>
</blockquote>
<h4><a class="anchor" name="audio" href="#audio"><i class="anchor-icon"></i></a>Audio</h4>
<p>This object represents an audio file (voice note).</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>file_id</td>
<td>String</td>
<td>Unique identifier for this file</td>
</tr>
<tr>
<td>duration</td>
<td>Integer</td>
<td>Duration of the audio in seconds as defined by sender</td>
</tr>
<tr>
<td>mime_type</td>
<td>String</td>
<td><em>Optional</em>. MIME type of the file as defined by sender</td>
</tr>
<tr>
<td>file_size</td>
<td>Integer</td>
<td><em>Optional</em>. File size</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="document" href="#document"><i class="anchor-icon"></i></a>Document</h4>
<p>This object represents a general file (as opposed to <a href="#photosize">photos</a> and <a href="#audio">audio files</a>).</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>file_id</td>
<td>String</td>
<td>Unique file identifier</td>
</tr>
<tr>
<td>thumb</td>
<td><a href="#photosize">PhotoSize</a></td>
<td>Document thumbnail as defined by sender</td>
</tr>
<tr>
<td>file_name</td>
<td>String</td>
<td><em>Optional</em>. Original filename as defined by sender</td>
</tr>
<tr>
<td>mime_type</td>
<td>String</td>
<td><em>Optional</em>. MIME type of the file as defined by sender</td>
</tr>
<tr>
<td>file_size</td>
<td>Integer</td>
<td><em>Optional</em>. File size</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sticker" href="#sticker"><i class="anchor-icon"></i></a>Sticker</h4>
<p>This object represents a sticker.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>file_id</td>
<td>String</td>
<td>Unique identifier for this file</td>
</tr>
<tr>
<td>width</td>
<td>Integer</td>
<td>Sticker width</td>
</tr>
<tr>
<td>height</td>
<td>Integer</td>
<td>Sticker height</td>
</tr>
<tr>
<td>thumb</td>
<td><a href="#photosize">PhotoSize</a></td>
<td>Sticker thumbnail in .webp or .jpg format</td>
</tr>
<tr>
<td>file_size</td>
<td>Integer</td>
<td><em>Optional</em>. File size</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="video" href="#video"><i class="anchor-icon"></i></a>Video</h4>
<p>This object represents a video file.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>file_id</td>
<td>String</td>
<td>Unique identifier for this file</td>
</tr>
<tr>
<td>width</td>
<td>Integer</td>
<td>Video width as defined by sender</td>
</tr>
<tr>
<td>height</td>
<td>Integer</td>
<td>Video height as defined by sender</td>
</tr>
<tr>
<td>duration</td>
<td>Integer</td>
<td>Duration of the video in seconds as defined by sender</td>
</tr>
<tr>
<td>thumb</td>
<td><a href="#photosize">PhotoSize</a></td>
<td>Video thumbnail</td>
</tr>
<tr>
<td>mime_type</td>
<td>String</td>
<td><em>Optional</em>. Mime type of a file as defined by sender</td>
</tr>
<tr>
<td>file_size</td>
<td>Integer</td>
<td><em>Optional</em>. File size</td>
</tr>
<tr>
<td>caption</td>
<td>String</td>
<td><em>Optional</em>. Text description of the video (usually empty)</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="contact" href="#contact"><i class="anchor-icon"></i></a>Contact</h4>
<p>This object represents a phone contact.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>phone_number</td>
<td>String</td>
<td>Contact&#39;s phone number</td>
</tr>
<tr>
<td>first_name</td>
<td>String</td>
<td>Contact&#39;s first name</td>
</tr>
<tr>
<td>last_name</td>
<td>String</td>
<td><em>Optional</em>. Contact&#39;s last name</td>
</tr>
<tr>
<td>user_id</td>
<td>String</td>
<td><em>Optional</em>. Contact&#39;s user identifier in Telegram</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="location" href="#location"><i class="anchor-icon"></i></a>Location</h4>
<p>This object represents a point on the map.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>longitude</td>
<td>Float</td>
<td>Longitude as defined by sender</td>
</tr>
<tr>
<td>latitude</td>
<td>Float</td>
<td>Latitude as defined by sender</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="userprofilephotos" href="#userprofilephotos"><i class="anchor-icon"></i></a>UserProfilePhotos</h4>
<p>This object represent a user&#39;s profile pictures.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>total_count</td>
<td>Integer</td>
<td>Total number of profile pictures the target user has</td>
</tr>
<tr>
<td>photos</td>
<td>Array of Array of <a href="#photosize">PhotoSize</a></td>
<td>Requested profile pictures (in up to 4 sizes each)</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="replykeyboardmarkup" href="#replykeyboardmarkup"><i class="anchor-icon"></i></a>ReplyKeyboardMarkup</h4>
<p>This object represents a <a href="https://core.telegram.org/bots#keyboards">custom keyboard</a> with reply options (see <a href="https://core.telegram.org/bots#keyboards">Introduction to bots</a> for details and examples).</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>keyboard</td>
<td>Array of Array of String</td>
<td>Array of button rows, each represented by an Array of Strings</td>
</tr>
<tr>
<td>resize_keyboard</td>
<td>Boolean</td>
<td><em>Optional</em>. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to <em>false</em>, in which case the custom keyboard is always of the same height as the app&#39;s standard keyboard.</td>
</tr>
<tr>
<td>one_time_keyboard</td>
<td>Boolean</td>
<td><em>Optional</em>. Requests clients to hide the keyboard as soon as it&#39;s been used. Defaults to <em>false</em>.</td>
</tr>
<tr>
<td>selective</td>
<td>Boolean</td>
<td><em>Optional</em>. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the <em>text</em> of the <a href="#message">Message</a> object; 2) if the bot&#39;s message is a reply (has <em>reply_to_message_id</em>), sender of the original message.<br><br><em>Example:</em> A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="replykeyboardhide" href="#replykeyboardhide"><i class="anchor-icon"></i></a>ReplyKeyboardHide</h4>
<p>Upon receiving a message with this object, Telegram clients will hide the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see <a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a>).</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>hide_keyboard</td>
<td>True</td>
<td>Requests clients to hide the custom keyboard</td>
</tr>
<tr>
<td>selective</td>
<td>Boolean</td>
<td><em>Optional</em>. Use this parameter if you want to hide keyboard for specific users only. Targets: 1) users that are @mentioned in the <em>text</em> of the <a href="#message">Message</a> object; 2) if the bot&#39;s message is a reply (has <em>reply_to_message_id</em>), sender of the original message.<br><br><em>Example:</em> A user votes in a poll, bot returns confirmation message in reply to the vote and hides keyboard for that user, while still showing the keyboard with poll options to users who haven&#39;t voted yet.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="forcereply" href="#forcereply"><i class="anchor-icon"></i></a>ForceReply</h4>
<p>Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot‘s message and tapped ’Reply&#39;). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice <a href="/bots#privacy-mode">privacy mode</a>.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Field</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>force_reply</td>
<td>True</td>
<td>Shows reply interface to the user, as if they manually selected the bot‘s message and tapped ’Reply&#39;</td>
</tr>
<tr>
<td>selective</td>
<td>Boolean</td>
<td><em>Optional</em>. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the <em>text</em> of the <a href="#message">Message</a> object; 2) if the bot&#39;s message is a reply (has <em>reply_to_message_id</em>), sender of the original message.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Example:</strong> A <a href="https://telegram.me/PollBot">poll bot</a> for groups runs in privacy mode (only receives commands, replies to its messages and mentions). There could be two ways to create a new poll:</p>
</blockquote>
<ul>
<li>Explain the user how to send a command with parameters (e.g. /newpoll question answer1 answer2). May be appealing for hardcore users but lacks modern day polish.</li>
<li>Guide the user through a step-by-step process. ‘Please send me your question’, ‘Cool, now let’s add the first answer option‘, ’Great. Keep adding answer options, then send /done when you‘re ready’.</li>
</ul>
<p>The last option is definitely more attractive. And if you use <a href="#forcereply">ForceReply</a> in your bot‘s questions, it will receive the user’s answers even if it only receives replies, commands and mentions — without any extra work for the user.</p>
<h4><a class="anchor" name="inputfile" href="#inputfile"><i class="anchor-icon"></i></a>InputFile</h4>
<p>This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. </p>
<h5><a class="anchor" name="resending-files-without-reuploading" href="#resending-files-without-reuploading"><i class="anchor-icon"></i></a>Resending files without reuploading</h5>
<p>There are <strong>two ways</strong> of sending a file (photo, sticker, audio etc.). If it‘s a new file, you can upload it using multipart/form-data. If the file is already on our servers, you don’t need to reupload it: each file object has a <strong>file_id</strong> field, you can simply pass this <strong>file_id</strong> as a parameter instead.</p>
<ul>
<li>It is not possible to change the file type when resending by <strong>file_id</strong>. I.e. a <a href="#video">video</a> can&#39;t be <a href="#sendphoto">sent as a photo</a>, a <a href="#photosize">photo</a> can&#39;t be <a href="#senddocument">sent as a document</a>, etc.</li>
<li>It is not possible to resend thumbnails.</li>
<li>Resending a photo by <strong>file_id</strong> will send all of its <a href="#photosize">sizes</a>. </li>
</ul>
<h3><a class="anchor" name="available-methods" href="#available-methods"><i class="anchor-icon"></i></a>Available methods</h3>
<ul>
<li><a href="#getme">getMe</a></li>
<li><a href="#sendmessage">sendMessage</a></li>
<li><a href="#forwardmessage">forwardMessage</a></li>
<li><a href="#sendphoto">sendPhoto</a></li>
<li><a href="#sendaudio">sendAudio</a></li>
<li><a href="#senddocument">sendDocument</a></li>
<li><a href="#sendsticker">sendSticker</a></li>
<li><a href="#sendvideo">sendVideo</a></li>
<li><a href="#sendlocation">sendLocation</a></li>
<li><a href="#sendchataction">sendChatAction</a></li>
<li><a href="#getuserprofilephotos">getUserProfilePhotos</a></li>
<li><a href="#getupdates">getUpdates</a></li>
<li><a href="#setwebhook">setWebhook</a></li>
</ul>
<blockquote>
<p>All methods in the Bot API are case-insensitive. We support <strong>GET</strong> and <strong>POST</strong> HTTP methods. Use either <a href="https://en.wikipedia.org/wiki/Query_string">URL query string](</a>) or application/x-www-form-urlencoded or multipart/form-data for passing parameters in Bot API requests.<br>On successful call, a JSON-object containing the result will be returned. </p>
</blockquote>
<h4><a class="anchor" name="getme" href="#getme"><i class="anchor-icon"></i></a>getMe</h4>
<p>A simple method for testing your bot&#39;s auth token. Requires no parameters. Returns basic information about the bot in form of a <a href="#user">User</a> object.</p>
<h4><a class="anchor" name="sendmessage" href="#sendmessage"><i class="anchor-icon"></i></a>sendMessage</h4>
<p>Use this method to send text messages. On success, the sent <a href="#message">Message</a> is returned.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td>Yes</td>
<td>Text of the message to be sent</td>
</tr>
<tr>
<td>disable_web_page_preview</td>
<td>Boolean</td>
<td>Optional</td>
<td>Disables link previews for links in this message</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="forwardmessage" href="#forwardmessage"><i class="anchor-icon"></i></a>forwardMessage</h4>
<p>Use this method to forward messages of any kind. On success, the sent <a href="#message">Message</a> is returned.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>from_chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the chat where the original message was sent — User or GroupChat id</td>
</tr>
<tr>
<td>message_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique message identifier</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sendphoto" href="#sendphoto"><i class="anchor-icon"></i></a>sendPhoto</h4>
<p>Use this method to send photos. On success, the sent <a href="#message">Message</a> is returned.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>photo</td>
<td><a href="#inputfile">InputFile</a> or String</td>
<td>Yes</td>
<td>Photo to send. You can either pass a <em>file_id</em> as String to <a href="#resending-files-without-reuploading">resend</a> a photo that is already on the Telegram servers, or upload a new photo using multipart/form-data.</td>
</tr>
<tr>
<td>caption</td>
<td>String</td>
<td>Optional</td>
<td>Photo caption (may also be used when resending photos by <em>file_id</em>).</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sendaudio" href="#sendaudio"><i class="anchor-icon"></i></a>sendAudio</h4>
<p>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as <a href="#document">Document</a>). On success, the sent <a href="#message">Message</a> is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>audio</td>
<td><a href="#inputfile">InputFile</a> or String</td>
<td>Yes</td>
<td>Audio file to send. You can either pass a <em>file_id</em> as String to <a href="#resending-files-without-reuploading">resend</a> an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="senddocument" href="#senddocument"><i class="anchor-icon"></i></a>sendDocument</h4>
<p>Use this method to send general files. On success, the sent <a href="#message">Message</a> is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>document</td>
<td><a href="#inputfile">InputFile</a> or String</td>
<td>Yes</td>
<td>File to send. You can either pass a <em>file_id</em> as String to <a href="#resending-files-without-reuploading">resend</a> a file that is already on the Telegram servers, or upload a new file using multipart/form-data.</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sendsticker" href="#sendsticker"><i class="anchor-icon"></i></a>sendSticker</h4>
<p>Use this method to send .webp stickers. On success, the sent <a href="#message">Message</a> is returned.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>sticker</td>
<td><a href="#inputfile">InputFile</a> or String</td>
<td>Yes</td>
<td>Sticker to send. You can either pass a <em>file_id</em> as String to <a href="#resending-files-without-reuploading">resend</a> a sticker that is already on the Telegram servers, or upload a new sticker using multipart/form-data.</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sendvideo" href="#sendvideo"><i class="anchor-icon"></i></a>sendVideo</h4>
<p>Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as <a href="#document">Document</a>). On success, the sent <a href="#message">Message</a> is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>video</td>
<td><a href="#inputfile">InputFile</a> or String</td>
<td>Yes</td>
<td>Video to send. You can either pass a <em>file_id</em> as String to <a href="#resending-files-without-reuploading">resend</a> a video that is already on the Telegram servers, or upload a new video file using multipart/form-data.</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sendlocation" href="#sendlocation"><i class="anchor-icon"></i></a>sendLocation</h4>
<p>Use this method to send point on the map. On success, the sent <a href="#message">Message</a> is returned.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>latitude</td>
<td>Float number</td>
<td>Yes</td>
<td>Latitude of location</td>
</tr>
<tr>
<td>longitude</td>
<td>Float number</td>
<td>Yes</td>
<td>Longitude of location</td>
</tr>
<tr>
<td>reply_to_message_id</td>
<td>Integer</td>
<td>Optional</td>
<td>If the message is a reply, ID of the original message</td>
</tr>
<tr>
<td>reply_markup</td>
<td><a href="#replykeyboardmarkup">ReplyKeyboardMarkup</a> or <a href="#replykeyboardhide">ReplyKeyboardHide</a> or <a href="#forcereply">ForceReply</a></td>
<td>Optional</td>
<td>Additional interface options. A JSON-serialized object for a <a href="https://core.telegram.org/bots#keyboards">custom reply keyboard</a>, instructions to hide keyboard or to force a reply from the user.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="sendchataction" href="#sendchataction"><i class="anchor-icon"></i></a>sendChatAction</h4>
<p>Use this method when you need to tell the user that something is happening on the bot&#39;s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). </p>
<blockquote>
<p>Example: The <a href="https://telegram.me/imagebot">ImageBot</a> needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use <a href="#sendchataction">sendChatAction</a> with <em>action</em> = <em>upload_photo</em>. The user will see a “sending photo” status for the bot.</p>
</blockquote>
<p>We only recommend using this method when a response from the bot will take a <strong>noticeable</strong> amount of time to arrive.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>chat_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier for the message recipient — User or GroupChat id</td>
</tr>
<tr>
<td>action</td>
<td>String</td>
<td>Yes</td>
<td>Type of action to broadcast. Choose one, depending on what the user is about to receive: <em>typing</em> for <a href="#sendmessage">text messages</a>, <em>upload_photo</em> for <a href="#sendphoto">photos</a>, <em>record_video</em> or <em>upload_video</em> for <a href="#sendvideo">videos</a>, <em>record_audio</em> or <em>upload_audio</em> for <a href="#sendaudio">audio files</a>, <em>upload_document</em> for <a href="#senddocument">general files</a>, <em>find_location</em> for <a href="#sendlocation">location data</a>.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="getuserprofilephotos" href="#getuserprofilephotos"><i class="anchor-icon"></i></a>getUserProfilePhotos</h4>
<p>Use this method to get a list of profile pictures for a user. Returns a <a href="#userprofilephotos">UserProfilePhotos</a> object.</p>
<table class="table">
<tbody>
<tr>
<td><strong>Parameters</strong></td>
<td><strong>Type</strong></td>
<td><strong>Required</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>user_id</td>
<td>Integer</td>
<td>Yes</td>
<td>Unique identifier of the target user</td>
</tr>
<tr>
<td>offset</td>
<td>Integer</td>
<td>Optional</td>
<td>Sequential number of the first photo to be returned. By default, all photos are returned.</td>
</tr>
<tr>
<td>limit</td>
<td>Integer</td>
<td>Optional</td>
<td>Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.</td>
</tr>
</tbody>
</table>
</div>
  
</div>
          
        </div>
      </div>
      <div class="footer_wrap">
  <div class="footer_columns_wrap clearfix footer_desktop">
    <div class="footer_column footer_column_telegram">
      <h5>Telegram</h5>
      <div class="footer_telegram_description"></div>
      Telegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.
    </div>

    <div class="footer_column">
      <h5><a href="//telegram.org/faq">About</a></h5>
      <ul>
        <li><a href="//telegram.org/faq">FAQ</a></li>
        <li><a href="//telegram.org/blog">Blog</a></li>
        <li><a href="//telegram.org/press">Press</a></li>
      </ul>
    </div>
    <div class="footer_column">
      <h5><a href="//telegram.org/apps#mobile-apps">Mobile Apps</a></h5>
      <ul>
        <li><a href="//telegram.org/dl/ios">iPhone/iPad</a></li>
        <li><a href="//telegram.org/dl/android">Android</a></li>
        <li><a href="//telegram.org/dl/wp">Windows Phone</a></li>
      </ul>
    </div>
    <div class="footer_column">
      <h5><a href="//telegram.org/apps#desktop-apps">Desktop Apps</a></h5>
      <ul>
        <li><a href="//telegram.org/dl/tdesktop">PC/Mac/Linux</a></li>
        <li><a href="//telegram.org/dl/osx">Mac OS</a></li>
        <li><a href="//telegram.org/dl/web">Web-browser</a></li>
      </ul>
    </div>
    <div class="footer_column footer_column_platform">
      <h5><a href="/">Platform</a></h5>
      <ul>
        <li><a href="/api">API</a></li>
        <li><a href="/mtproto">Protocol</a></li>
        <li><a href="/schema">Schema</a></li>
      </ul>
    </div>
  </div>
  <div class="footer_columns_wrap clearfix footer_mobile">
    <div class="footer_column">
      <h5><a href="//telegram.org/faq">About</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="//telegram.org/blog">Blog</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="//telegram.org/apps">Apps</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="/">Platform</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="https://twitter.com/telegram" target="_blank" data-track="Follow/Twitter" onclick="trackDlClick(this, event)">Twitter</a></h5>
    </div>
  </div>
</div>
    </div>
    <script src="/js/main.js?13"></script>
    
    <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-45099287-1', 'telegram.org');
ga('send', 'pageview');backToTopInit();
</script>
  </body>
</html>
<!-- page generated in 4.23ms -->
